// Copyright 2022
// Autogenerated from Pigeon (v4.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package nd.flutter.plugins.gpu_video_filters;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PreviewMessages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BindPreviewMessage {
    private @NonNull Long textureId;
    public @NonNull Long getTextureId() { return textureId; }
    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull Long filterId;
    public @NonNull Long getFilterId() { return filterId; }
    public void setFilterId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterId\" is null.");
      }
      this.filterId = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private BindPreviewMessage() {}
    public static final class Builder {
      private @Nullable Long textureId;
      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }
      private @Nullable Long filterId;
      public @NonNull Builder setFilterId(@NonNull Long setterArg) {
        this.filterId = setterArg;
        return this;
      }
      public @NonNull BindPreviewMessage build() {
        BindPreviewMessage pigeonReturn = new BindPreviewMessage();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setFilterId(filterId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("filterId", filterId);
      return toMapResult;
    }
    static @NonNull BindPreviewMessage fromMap(@NonNull Map<String, Object> map) {
      BindPreviewMessage pigeonResult = new BindPreviewMessage();
      Object textureId = map.get("textureId");
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId));
      Object filterId = map.get("filterId");
      pigeonResult.setFilterId((filterId == null) ? null : ((filterId instanceof Integer) ? (Integer)filterId : (Long)filterId));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SourcePreviewMessage {
    private @NonNull Long textureId;
    public @NonNull Long getTextureId() { return textureId; }
    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull String path;
    public @NonNull String getPath() { return path; }
    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    private @NonNull Boolean asset;
    public @NonNull Boolean getAsset() { return asset; }
    public void setAsset(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"asset\" is null.");
      }
      this.asset = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private SourcePreviewMessage() {}
    public static final class Builder {
      private @Nullable Long textureId;
      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }
      private @Nullable String path;
      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }
      private @Nullable Boolean asset;
      public @NonNull Builder setAsset(@NonNull Boolean setterArg) {
        this.asset = setterArg;
        return this;
      }
      public @NonNull SourcePreviewMessage build() {
        SourcePreviewMessage pigeonReturn = new SourcePreviewMessage();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setPath(path);
        pigeonReturn.setAsset(asset);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("path", path);
      toMapResult.put("asset", asset);
      return toMapResult;
    }
    static @NonNull SourcePreviewMessage fromMap(@NonNull Map<String, Object> map) {
      SourcePreviewMessage pigeonResult = new SourcePreviewMessage();
      Object textureId = map.get("textureId");
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId));
      Object path = map.get("path");
      pigeonResult.setPath((String)path);
      Object asset = map.get("asset");
      pigeonResult.setAsset((Boolean)asset);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreviewMessage {
    private @NonNull Long textureId;
    public @NonNull Long getTextureId() { return textureId; }
    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private PreviewMessage() {}
    public static final class Builder {
      private @Nullable Long textureId;
      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }
      public @NonNull PreviewMessage build() {
        PreviewMessage pigeonReturn = new PreviewMessage();
        pigeonReturn.setTextureId(textureId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      return toMapResult;
    }
    static @NonNull PreviewMessage fromMap(@NonNull Map<String, Object> map) {
      PreviewMessage pigeonResult = new PreviewMessage();
      Object textureId = map.get("textureId");
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer)textureId : (Long)textureId));
      return pigeonResult;
    }
  }
  private static class VideoPreviewApiCodec extends StandardMessageCodec {
    public static final VideoPreviewApiCodec INSTANCE = new VideoPreviewApiCodec();
    private VideoPreviewApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BindPreviewMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PreviewMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return SourcePreviewMessage.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BindPreviewMessage) {
        stream.write(128);
        writeValue(stream, ((BindPreviewMessage) value).toMap());
      } else 
      if (value instanceof PreviewMessage) {
        stream.write(129);
        writeValue(stream, ((PreviewMessage) value).toMap());
      } else 
      if (value instanceof SourcePreviewMessage) {
        stream.write(130);
        writeValue(stream, ((SourcePreviewMessage) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPreviewApi {
    @NonNull PreviewMessage create();
    void connect(@NonNull BindPreviewMessage msg);
    void disconnect(@NonNull PreviewMessage msg);
    void setSource(@NonNull SourcePreviewMessage msg);
    void resume(@NonNull PreviewMessage msg);
    void pause(@NonNull PreviewMessage msg);
    void dispose(@NonNull PreviewMessage msg);

    /** The codec used by VideoPreviewApi. */
    static MessageCodec<Object> getCodec() {
      return       VideoPreviewApiCodec.INSTANCE;    }
    /**Sets up an instance of `VideoPreviewApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPreviewApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              PreviewMessage output = api.create();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.connect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              BindPreviewMessage msgArg = (BindPreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.connect(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              PreviewMessage msgArg = (PreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.disconnect(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.setSource", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              SourcePreviewMessage msgArg = (SourcePreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.setSource(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.resume", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              PreviewMessage msgArg = (PreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.resume(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              PreviewMessage msgArg = (PreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.pause(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              PreviewMessage msgArg = (PreviewMessage)args.get(0);
              if (msgArg == null) {
                throw new NullPointerException("msgArg unexpectedly null.");
              }
              api.dispose(msgArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
