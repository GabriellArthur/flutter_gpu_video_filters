// Copyright 2022
// Autogenerated from Pigeon (v7.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package nd.flutter.plugins.gpu_video_filters;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class PreviewMessages {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SourcePreviewMessage {
    private @NonNull Long textureId;

    public @NonNull Long getTextureId() {
      return textureId;
    }

    public void setTextureId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"textureId\" is null.");
      }
      this.textureId = setterArg;
    }

    private @NonNull String path;

    public @NonNull String getPath() {
      return path;
    }

    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    private @NonNull Boolean asset;

    public @NonNull Boolean getAsset() {
      return asset;
    }

    public void setAsset(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"asset\" is null.");
      }
      this.asset = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SourcePreviewMessage() {}

    public static final class Builder {

      private @Nullable Long textureId;

      public @NonNull Builder setTextureId(@NonNull Long setterArg) {
        this.textureId = setterArg;
        return this;
      }

      private @Nullable String path;

      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }

      private @Nullable Boolean asset;

      public @NonNull Builder setAsset(@NonNull Boolean setterArg) {
        this.asset = setterArg;
        return this;
      }

      public @NonNull SourcePreviewMessage build() {
        SourcePreviewMessage pigeonReturn = new SourcePreviewMessage();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setPath(path);
        pigeonReturn.setAsset(asset);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(textureId);
      toListResult.add(path);
      toListResult.add(asset);
      return toListResult;
    }

    static @NonNull SourcePreviewMessage fromList(@NonNull ArrayList<Object> list) {
      SourcePreviewMessage pigeonResult = new SourcePreviewMessage();
      Object textureId = list.get(0);
      pigeonResult.setTextureId((textureId == null) ? null : ((textureId instanceof Integer) ? (Integer) textureId : (Long) textureId));
      Object path = list.get(1);
      pigeonResult.setPath((String) path);
      Object asset = list.get(2);
      pigeonResult.setAsset((Boolean) asset);
      return pigeonResult;
    }
  }

  private static class VideoPreviewApiCodec extends StandardMessageCodec {
    public static final VideoPreviewApiCodec INSTANCE = new VideoPreviewApiCodec();

    private VideoPreviewApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return SourcePreviewMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof SourcePreviewMessage) {
        stream.write(128);
        writeValue(stream, ((SourcePreviewMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VideoPreviewApi {

    @NonNull 
    Long create();

    void connect(@NonNull Long textureId, @NonNull Long filterId, @NonNull Boolean embedded);

    void disconnect(@NonNull Long textureId, @NonNull Boolean embedded);

    void setSource(@NonNull SourcePreviewMessage msg, @NonNull Boolean embedded);

    void resume(@NonNull Long textureId, @NonNull Boolean embedded);

    void pause(@NonNull Long textureId, @NonNull Boolean embedded);

    void dispose(@NonNull Long textureId, @NonNull Boolean embedded);

    /** The codec used by VideoPreviewApi. */
    static MessageCodec<Object> getCodec() {
      return VideoPreviewApiCodec.INSTANCE;
    }
    /**Sets up an instance of `VideoPreviewApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, VideoPreviewApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.create();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.connect", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number textureIdArg = (Number) args.get(0);
                  if (textureIdArg == null) {
                    throw new NullPointerException("textureIdArg unexpectedly null.");
                  }
                  Number filterIdArg = (Number) args.get(1);
                  if (filterIdArg == null) {
                    throw new NullPointerException("filterIdArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(2);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.connect((textureIdArg == null) ? null : textureIdArg.longValue(), (filterIdArg == null) ? null : filterIdArg.longValue(), embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number textureIdArg = (Number) args.get(0);
                  if (textureIdArg == null) {
                    throw new NullPointerException("textureIdArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(1);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.disconnect((textureIdArg == null) ? null : textureIdArg.longValue(), embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.setSource", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  SourcePreviewMessage msgArg = (SourcePreviewMessage) args.get(0);
                  if (msgArg == null) {
                    throw new NullPointerException("msgArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(1);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.setSource(msgArg, embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.resume", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number textureIdArg = (Number) args.get(0);
                  if (textureIdArg == null) {
                    throw new NullPointerException("textureIdArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(1);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.resume((textureIdArg == null) ? null : textureIdArg.longValue(), embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.pause", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number textureIdArg = (Number) args.get(0);
                  if (textureIdArg == null) {
                    throw new NullPointerException("textureIdArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(1);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.pause((textureIdArg == null) ? null : textureIdArg.longValue(), embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.VideoPreviewApi.dispose", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  Number textureIdArg = (Number) args.get(0);
                  if (textureIdArg == null) {
                    throw new NullPointerException("textureIdArg unexpectedly null.");
                  }
                  Boolean embeddedArg = (Boolean) args.get(1);
                  if (embeddedArg == null) {
                    throw new NullPointerException("embeddedArg unexpectedly null.");
                  }
                  api.dispose((textureIdArg == null) ? null : textureIdArg.longValue(), embeddedArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
