// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_gpu_video_filters/test/generated.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:flutter_gpu_video_filters/src/messages/filter_messages.g.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FilterApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterApi extends _i1.Mock implements _i2.FilterApi {
  MockFilterApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> create(
    String? arg_vertexShader,
    String? arg_fragmentShader,
    Map<String?, double?>? arg_defaults,
    Map<String?, _i4.Float64List?>? arg_arrays,
    String? arg_texture,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#create, [
              arg_vertexShader,
              arg_fragmentShader,
              arg_defaults,
              arg_arrays,
              arg_texture,
            ]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<int> exportVideoFile(
    int? arg_filterId,
    bool? arg_asset,
    String? arg_input,
    String? arg_output,
    String? arg_format,
    int? arg_period,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#exportVideoFile, [
              arg_filterId,
              arg_asset,
              arg_input,
              arg_output,
              arg_format,
              arg_period,
            ]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> setFloatParameter(
    int? arg_filterId,
    String? arg_key,
    double? arg_value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setFloatParameter, [
              arg_filterId,
              arg_key,
              arg_value,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setFloatArrayParameter(
    int? arg_filterId,
    String? arg_key,
    _i4.Float64List? arg_value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setFloatArrayParameter, [
              arg_filterId,
              arg_key,
              arg_value,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setBitmapParameter(
    int? arg_filterId,
    String? arg_key,
    _i4.Uint8List? arg_data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setBitmapParameter, [
              arg_filterId,
              arg_key,
              arg_data,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setBitmapSourceParameter(
    int? arg_filterId,
    String? arg_key,
    bool? arg_asset,
    String? arg_path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setBitmapSourceParameter, [
              arg_filterId,
              arg_key,
              arg_asset,
              arg_path,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dispose(int? arg_filterId) =>
      (super.noSuchMethod(
            Invocation.method(#dispose, [arg_filterId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [VideoPreviewApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoPreviewApi extends _i1.Mock implements _i2.VideoPreviewApi {
  MockVideoPreviewApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> create() =>
      (super.noSuchMethod(
            Invocation.method(#create, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> connect(
    int? arg_textureId,
    int? arg_filterId,
    bool? arg_embedded,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [
              arg_textureId,
              arg_filterId,
              arg_embedded,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> disconnect(int? arg_textureId, bool? arg_embedded) =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, [arg_textureId, arg_embedded]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setSource(
    int? arg_textureId,
    String? arg_path,
    bool? arg_asset,
    bool? arg_embedded,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setSource, [
              arg_textureId,
              arg_path,
              arg_asset,
              arg_embedded,
            ]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resume(int? arg_textureId, bool? arg_embedded) =>
      (super.noSuchMethod(
            Invocation.method(#resume, [arg_textureId, arg_embedded]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pause(int? arg_textureId, bool? arg_embedded) =>
      (super.noSuchMethod(
            Invocation.method(#pause, [arg_textureId, arg_embedded]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> dispose(int? arg_textureId, bool? arg_embedded) =>
      (super.noSuchMethod(
            Invocation.method(#dispose, [arg_textureId, arg_embedded]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
